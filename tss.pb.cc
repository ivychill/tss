// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tss {

namespace {

const ::google::protobuf::Descriptor* LYCoordinate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYCoordinate_reflection_ = NULL;
const ::google::protobuf::Descriptor* LYLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* LYSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYSegment_reflection_ = NULL;
const ::google::protobuf::Descriptor* LYRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYRoute_reflection_ = NULL;
const ::google::protobuf::Descriptor* LYSegmentTraffic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYSegmentTraffic_reflection_ = NULL;
const ::google::protobuf::Descriptor* LYRoadTraffic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYRoadTraffic_reflection_ = NULL;
const ::google::protobuf::Descriptor* LYCityTraffic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYCityTraffic_reflection_ = NULL;
const ::google::protobuf::Descriptor* LYCrontab_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYCrontab_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LYCrontab_LYCronType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LYTrafficSub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYTrafficSub_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LYTrafficSub_LYOprType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LYTrafficSub_LYPubType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LYTrafficPub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYTrafficPub_reflection_ = NULL;
const ::google::protobuf::Descriptor* LYDeviceReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYDeviceReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* LYCheckin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYCheckin_reflection_ = NULL;
const ::google::protobuf::Descriptor* LYSamplePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYSamplePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* LYTrafficReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYTrafficReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* LYMsgOnAir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LYMsgOnAir_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LYOsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LYDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LYRetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LYParty_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LYMsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tss_2eproto() {
  protobuf_AddDesc_tss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tss.proto");
  GOOGLE_CHECK(file != NULL);
  LYCoordinate_descriptor_ = file->message_type(0);
  static const int LYCoordinate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCoordinate, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCoordinate, lat_),
  };
  LYCoordinate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYCoordinate_descriptor_,
      LYCoordinate::default_instance_,
      LYCoordinate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCoordinate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCoordinate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYCoordinate));
  LYLocation_descriptor_ = file->message_type(1);
  static const int LYLocation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYLocation, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYLocation, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYLocation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYLocation, adt_),
  };
  LYLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYLocation_descriptor_,
      LYLocation::default_instance_,
      LYLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYLocation));
  LYSegment_descriptor_ = file->message_type(2);
  static const int LYSegment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSegment, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSegment, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSegment, road_),
  };
  LYSegment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYSegment_descriptor_,
      LYSegment::default_instance_,
      LYSegment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSegment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSegment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYSegment));
  LYRoute_descriptor_ = file->message_type(3);
  static const int LYRoute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYRoute, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYRoute, segments_),
  };
  LYRoute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYRoute_descriptor_,
      LYRoute::default_instance_,
      LYRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYRoute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYRoute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYRoute));
  LYSegmentTraffic_descriptor_ = file->message_type(4);
  static const int LYSegmentTraffic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSegmentTraffic, segment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSegmentTraffic, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSegmentTraffic, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSegmentTraffic, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSegmentTraffic, details_),
  };
  LYSegmentTraffic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYSegmentTraffic_descriptor_,
      LYSegmentTraffic::default_instance_,
      LYSegmentTraffic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSegmentTraffic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSegmentTraffic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYSegmentTraffic));
  LYRoadTraffic_descriptor_ = file->message_type(5);
  static const int LYRoadTraffic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYRoadTraffic, road_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYRoadTraffic, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYRoadTraffic, segment_traffics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYRoadTraffic, href_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYRoadTraffic, desc_),
  };
  LYRoadTraffic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYRoadTraffic_descriptor_,
      LYRoadTraffic::default_instance_,
      LYRoadTraffic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYRoadTraffic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYRoadTraffic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYRoadTraffic));
  LYCityTraffic_descriptor_ = file->message_type(6);
  static const int LYCityTraffic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCityTraffic, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCityTraffic, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCityTraffic, road_traffics_),
  };
  LYCityTraffic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYCityTraffic_descriptor_,
      LYCityTraffic::default_instance_,
      LYCityTraffic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCityTraffic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCityTraffic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYCityTraffic));
  LYCrontab_descriptor_ = file->message_type(7);
  static const int LYCrontab_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCrontab, cron_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCrontab, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCrontab, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCrontab, dom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCrontab, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCrontab, dow_),
  };
  LYCrontab_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYCrontab_descriptor_,
      LYCrontab::default_instance_,
      LYCrontab_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCrontab, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCrontab, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYCrontab));
  LYCrontab_LYCronType_descriptor_ = LYCrontab_descriptor_->enum_type(0);
  LYTrafficSub_descriptor_ = file->message_type(8);
  static const int LYTrafficSub_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficSub, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficSub, route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficSub, opr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficSub, pub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficSub, expires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficSub, cron_tab_),
  };
  LYTrafficSub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYTrafficSub_descriptor_,
      LYTrafficSub::default_instance_,
      LYTrafficSub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficSub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficSub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYTrafficSub));
  LYTrafficSub_LYOprType_descriptor_ = LYTrafficSub_descriptor_->enum_type(0);
  LYTrafficSub_LYPubType_descriptor_ = LYTrafficSub_descriptor_->enum_type(1);
  LYTrafficPub_descriptor_ = file->message_type(9);
  static const int LYTrafficPub_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficPub, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficPub, city_traffic_),
  };
  LYTrafficPub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYTrafficPub_descriptor_,
      LYTrafficPub::default_instance_,
      LYTrafficPub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficPub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficPub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYTrafficPub));
  LYDeviceReport_descriptor_ = file->message_type(10);
  static const int LYDeviceReport_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYDeviceReport, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYDeviceReport, device_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYDeviceReport, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYDeviceReport, device_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYDeviceReport, device_os_version_),
  };
  LYDeviceReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYDeviceReport_descriptor_,
      LYDeviceReport::default_instance_,
      LYDeviceReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYDeviceReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYDeviceReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYDeviceReport));
  LYCheckin_descriptor_ = file->message_type(11);
  static const int LYCheckin_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCheckin, device_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCheckin, os_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCheckin, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCheckin, ly_major_release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCheckin, ly_minor_release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCheckin, download_url_),
  };
  LYCheckin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYCheckin_descriptor_,
      LYCheckin::default_instance_,
      LYCheckin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCheckin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYCheckin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYCheckin));
  LYSamplePoint_descriptor_ = file->message_type(12);
  static const int LYSamplePoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSamplePoint, sp_coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSamplePoint, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSamplePoint, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSamplePoint, course_),
  };
  LYSamplePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYSamplePoint_descriptor_,
      LYSamplePoint::default_instance_,
      LYSamplePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSamplePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYSamplePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYSamplePoint));
  LYTrafficReport_descriptor_ = file->message_type(13);
  static const int LYTrafficReport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficReport, points_),
  };
  LYTrafficReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYTrafficReport_descriptor_,
      LYTrafficReport::default_instance_,
      LYTrafficReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYTrafficReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYTrafficReport));
  LYMsgOnAir_descriptor_ = file->message_type(14);
  static const int LYMsgOnAir_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, from_party_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, to_party_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, snd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, rcv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, checkin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, device_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, traffic_sub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, traffic_pub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, traffic_report_),
  };
  LYMsgOnAir_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LYMsgOnAir_descriptor_,
      LYMsgOnAir::default_instance_,
      LYMsgOnAir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LYMsgOnAir, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LYMsgOnAir));
  LYOsType_descriptor_ = file->enum_type(0);
  LYDirection_descriptor_ = file->enum_type(1);
  LYRetCode_descriptor_ = file->enum_type(2);
  LYParty_descriptor_ = file->enum_type(3);
  LYMsgType_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYCoordinate_descriptor_, &LYCoordinate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYLocation_descriptor_, &LYLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYSegment_descriptor_, &LYSegment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYRoute_descriptor_, &LYRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYSegmentTraffic_descriptor_, &LYSegmentTraffic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYRoadTraffic_descriptor_, &LYRoadTraffic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYCityTraffic_descriptor_, &LYCityTraffic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYCrontab_descriptor_, &LYCrontab::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYTrafficSub_descriptor_, &LYTrafficSub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYTrafficPub_descriptor_, &LYTrafficPub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYDeviceReport_descriptor_, &LYDeviceReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYCheckin_descriptor_, &LYCheckin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYSamplePoint_descriptor_, &LYSamplePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYTrafficReport_descriptor_, &LYTrafficReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LYMsgOnAir_descriptor_, &LYMsgOnAir::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tss_2eproto() {
  delete LYCoordinate::default_instance_;
  delete LYCoordinate_reflection_;
  delete LYLocation::default_instance_;
  delete LYLocation_reflection_;
  delete LYSegment::default_instance_;
  delete LYSegment_reflection_;
  delete LYRoute::default_instance_;
  delete LYRoute_reflection_;
  delete LYSegmentTraffic::default_instance_;
  delete LYSegmentTraffic_reflection_;
  delete LYRoadTraffic::default_instance_;
  delete LYRoadTraffic_reflection_;
  delete LYCityTraffic::default_instance_;
  delete LYCityTraffic_reflection_;
  delete LYCrontab::default_instance_;
  delete LYCrontab_reflection_;
  delete LYTrafficSub::default_instance_;
  delete LYTrafficSub_reflection_;
  delete LYTrafficPub::default_instance_;
  delete LYTrafficPub_reflection_;
  delete LYDeviceReport::default_instance_;
  delete LYDeviceReport_reflection_;
  delete LYCheckin::default_instance_;
  delete LYCheckin_reflection_;
  delete LYSamplePoint::default_instance_;
  delete LYSamplePoint_reflection_;
  delete LYTrafficReport::default_instance_;
  delete LYTrafficReport_reflection_;
  delete LYMsgOnAir::default_instance_;
  delete LYMsgOnAir_reflection_;
}

void protobuf_AddDesc_tss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ttss.proto\022\003tss\"(\n\014LYCoordinate\022\013\n\003lng\030"
    "\001 \002(\001\022\013\n\003lat\030\002 \002(\001\"A\n\nLYLocation\022\013\n\003lng\030"
    "\001 \002(\001\022\013\n\003lat\030\002 \002(\001\022\014\n\004name\030\003 \001(\t\022\013\n\003adt\030"
    "\013 \001(\t\"[\n\tLYSegment\022 \n\005start\030\001 \002(\0132\021.tss."
    "LYCoordinate\022\036\n\003end\030\002 \002(\0132\021.tss.LYCoordi"
    "nate\022\014\n\004road\030\003 \001(\t\"=\n\007LYRoute\022\020\n\010identit"
    "y\030\001 \002(\005\022 \n\010segments\030\002 \003(\0132\016.tss.LYSegmen"
    "t\"\213\001\n\020LYSegmentTraffic\022\037\n\007segment\030\001 \002(\0132"
    "\016.tss.LYSegment\022\021\n\ttimestamp\030\003 \001(\003\022#\n\tdi"
    "rection\030\004 \002(\0162\020.tss.LYDirection\022\r\n\005speed"
    "\030\005 \002(\005\022\017\n\007details\030\013 \001(\t\"}\n\rLYRoadTraffic"
    "\022\014\n\004road\030\001 \002(\t\022\021\n\ttimestamp\030\002 \001(\003\022/\n\020seg"
    "ment_traffics\030\003 \003(\0132\025.tss.LYSegmentTraff"
    "ic\022\014\n\004href\030\014 \001(\t\022\014\n\004desc\030\013 \001(\t\"[\n\rLYCity"
    "Traffic\022\014\n\004city\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\003"
    "\022)\n\rroad_traffics\030\003 \003(\0132\022.tss.LYRoadTraf"
    "fic\"\344\001\n\tLYCrontab\022,\n\tcron_type\030\001 \002(\0162\031.t"
    "ss.LYCrontab.LYCronType\022\016\n\006minute\030\002 \001(\003\022"
    "\014\n\004hour\030\003 \001(\003\022\013\n\003dom\030\004 \001(\005\022\r\n\005month\030\005 \001("
    "\005\022\013\n\003dow\030\006 \001(\005\"b\n\nLYCronType\022\021\n\rLY_REP_M"
    "INUTE\020\001\022\017\n\013LY_REP_HOUR\020\002\022\016\n\nLY_REP_DOM\020\004"
    "\022\020\n\014LY_REP_MONTH\020\010\022\016\n\nLY_REP_DOW\020\020\"\326\002\n\014L"
    "YTrafficSub\022\014\n\004city\030\001 \002(\t\022\033\n\005route\030\002 \002(\013"
    "2\014.tss.LYRoute\022-\n\010opr_type\030\003 \002(\0162\033.tss.L"
    "YTrafficSub.LYOprType\022-\n\010pub_type\030\004 \002(\0162"
    "\033.tss.LYTrafficSub.LYPubType\022\023\n\007expires\030"
    "\005 \001(\005:\00230\022 \n\010cron_tab\030\006 \001(\0132\016.tss.LYCron"
    "tab\"D\n\tLYOprType\022\021\n\rLY_SUB_CREATE\020\001\022\021\n\rL"
    "Y_SUB_DELETE\020\002\022\021\n\rLY_SUB_UPDATE\020\003\"@\n\tLYP"
    "ubType\022\020\n\014LY_PUB_ADHOC\020\001\022\020\n\014LY_PUB_EVENT"
    "\020\002\022\017\n\013LY_PUB_CRON\020\003\"J\n\014LYTrafficPub\022\020\n\010r"
    "oute_id\030\001 \002(\005\022(\n\014city_traffic\030\002 \002(\0132\022.ts"
    "s.LYCityTraffic\"\177\n\016LYDeviceReport\022\021\n\tdev"
    "ice_id\030\001 \002(\t\022\024\n\014device_token\030\002 \002(\014\022\023\n\013de"
    "vice_name\030\003 \002(\t\022\024\n\014device_model\030\004 \002(\t\022\031\n"
    "\021device_os_version\030\005 \002(\t\"\237\001\n\tLYCheckin\022\024"
    "\n\014device_model\030\001 \001(\t\022\036\n\007os_type\030\002 \002(\0162\r."
    "tss.LYOsType\022\022\n\nos_version\030\003 \001(\t\022\030\n\020ly_m"
    "ajor_release\030\004 \002(\005\022\030\n\020ly_minor_release\030\005"
    " \002(\005\022\024\n\014download_url\030\006 \001(\t\"n\n\rLYSamplePo"
    "int\022(\n\rsp_coordinate\030\001 \002(\0132\021.tss.LYCoord"
    "inate\022\021\n\ttimestamp\030\002 \002(\003\022\020\n\010altitude\030\003 \001"
    "(\001\022\016\n\006course\030\004 \001(\001\"5\n\017LYTrafficReport\022\"\n"
    "\006points\030\001 \003(\0132\022.tss.LYSamplePoint\"\314\003\n\nLY"
    "MsgOnAir\022\017\n\007version\030\001 \002(\005\022\016\n\006msg_id\030\005 \002("
    "\005\022\021\n\ttimestamp\030\006 \002(\003\022 \n\nfrom_party\030\002 \002(\016"
    "2\014.tss.LYParty\022\036\n\010to_party\030\003 \002(\0162\014.tss.L"
    "YParty\022 \n\010msg_type\030\004 \002(\0162\016.tss.LYMsgType"
    "\022\016\n\006snd_id\030\007 \001(\t\022\016\n\006rcv_id\030\010 \001(\t\022\021\n\tsign"
    "ature\030\t \001(\014\022 \n\010ret_code\030\021 \001(\0162\016.tss.LYRe"
    "tCode\022\037\n\007checkin\030\022 \001(\0132\016.tss.LYCheckin\022*"
    "\n\rdevice_report\030\023 \001(\0132\023.tss.LYDeviceRepo"
    "rt\022&\n\013traffic_sub\030$ \001(\0132\021.tss.LYTrafficS"
    "ub\022&\n\013traffic_pub\0303 \001(\0132\021.tss.LYTrafficP"
    "ub\022,\n\016traffic_report\030A \001(\0132\024.tss.LYTraff"
    "icReport*\006\010\200\001\020\200\002*1\n\010LYOsType\022\016\n\nLY_ANDRO"
    "ID\020\000\022\n\n\006LY_IOS\020\001\022\t\n\005LY_WP\020\002*\233\001\n\013LYDirect"
    "ion\022\016\n\nLY_UNKNOWN\020\000\022\013\n\007LY_EAST\020\001\022\020\n\014LY_N"
    "ORTHEAST\020\002\022\014\n\010LY_NORTH\020\003\022\020\n\014LY_NORTHWEST"
    "\020\004\022\013\n\007LY_WEST\020\005\022\020\n\014LY_SOUTHWEST\020\006\022\014\n\010LY_"
    "SOUTH\020\007\022\020\n\014LY_SOUTHEAST\020\010*\241\001\n\tLYRetCode\022"
    "\016\n\nLY_SUCCESS\020\000\022\034\n\027LY_VERSION_IMCOMPATIB"
    "LE\020\221\002\022\023\n\016LY_VERSION_LOW\020\243\002\022\023\n\016LY_PARTY_E"
    "RROR\020\251\004\022\026\n\021LY_MSG_TYPE_ERROR\020\222\007\022\017\n\nLY_TI"
    "MEOUT\020\223\t\022\023\n\016LY_OTHER_ERROR\020\231\023*/\n\007LYParty"
    "\022\r\n\tLY_CLIENT\020\001\022\n\n\006LY_TSS\020\002\022\t\n\005LY_TC\020\003*\201"
    "\001\n\tLYMsgType\022\016\n\nLY_CHECKIN\020\001\022\017\n\013LY_RET_C"
    "ODE\020\002\022\022\n\016LY_TRAFFIC_SUB\020\004\022\025\n\021LY_TRAFFIC_"
    "REPORT\020\005\022\024\n\020LY_DEVICE_REPORT\020\006\022\022\n\016LY_TRA"
    "FFIC_PUB\020\023B\'\n\032com.luyun.easyway95.shared"
    "B\tTSSProtos", 2811);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tss.proto", &protobuf_RegisterTypes);
  LYCoordinate::default_instance_ = new LYCoordinate();
  LYLocation::default_instance_ = new LYLocation();
  LYSegment::default_instance_ = new LYSegment();
  LYRoute::default_instance_ = new LYRoute();
  LYSegmentTraffic::default_instance_ = new LYSegmentTraffic();
  LYRoadTraffic::default_instance_ = new LYRoadTraffic();
  LYCityTraffic::default_instance_ = new LYCityTraffic();
  LYCrontab::default_instance_ = new LYCrontab();
  LYTrafficSub::default_instance_ = new LYTrafficSub();
  LYTrafficPub::default_instance_ = new LYTrafficPub();
  LYDeviceReport::default_instance_ = new LYDeviceReport();
  LYCheckin::default_instance_ = new LYCheckin();
  LYSamplePoint::default_instance_ = new LYSamplePoint();
  LYTrafficReport::default_instance_ = new LYTrafficReport();
  LYMsgOnAir::default_instance_ = new LYMsgOnAir();
  LYCoordinate::default_instance_->InitAsDefaultInstance();
  LYLocation::default_instance_->InitAsDefaultInstance();
  LYSegment::default_instance_->InitAsDefaultInstance();
  LYRoute::default_instance_->InitAsDefaultInstance();
  LYSegmentTraffic::default_instance_->InitAsDefaultInstance();
  LYRoadTraffic::default_instance_->InitAsDefaultInstance();
  LYCityTraffic::default_instance_->InitAsDefaultInstance();
  LYCrontab::default_instance_->InitAsDefaultInstance();
  LYTrafficSub::default_instance_->InitAsDefaultInstance();
  LYTrafficPub::default_instance_->InitAsDefaultInstance();
  LYDeviceReport::default_instance_->InitAsDefaultInstance();
  LYCheckin::default_instance_->InitAsDefaultInstance();
  LYSamplePoint::default_instance_->InitAsDefaultInstance();
  LYTrafficReport::default_instance_->InitAsDefaultInstance();
  LYMsgOnAir::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tss_2eproto {
  StaticDescriptorInitializer_tss_2eproto() {
    protobuf_AddDesc_tss_2eproto();
  }
} static_descriptor_initializer_tss_2eproto_;

const ::google::protobuf::EnumDescriptor* LYOsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYOsType_descriptor_;
}
bool LYOsType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LYDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYDirection_descriptor_;
}
bool LYDirection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LYRetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYRetCode_descriptor_;
}
bool LYRetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 273:
    case 291:
    case 553:
    case 914:
    case 1171:
    case 2457:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LYParty_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYParty_descriptor_;
}
bool LYParty_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LYMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYMsgType_descriptor_;
}
bool LYMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 19:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LYCoordinate::kLngFieldNumber;
const int LYCoordinate::kLatFieldNumber;
#endif  // !_MSC_VER

LYCoordinate::LYCoordinate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYCoordinate::InitAsDefaultInstance() {
}

LYCoordinate::LYCoordinate(const LYCoordinate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYCoordinate::SharedCtor() {
  _cached_size_ = 0;
  lng_ = 0;
  lat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYCoordinate::~LYCoordinate() {
  SharedDtor();
}

void LYCoordinate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LYCoordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYCoordinate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYCoordinate_descriptor_;
}

const LYCoordinate& LYCoordinate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYCoordinate* LYCoordinate::default_instance_ = NULL;

LYCoordinate* LYCoordinate::New() const {
  return new LYCoordinate;
}

void LYCoordinate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lng_ = 0;
    lat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYCoordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lng = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }
      
      // required double lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYCoordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double lng = 1;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lng(), output);
  }
  
  // required double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYCoordinate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double lng = 1;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lng(), target);
  }
  
  // required double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYCoordinate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double lng = 1;
    if (has_lng()) {
      total_size += 1 + 8;
    }
    
    // required double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYCoordinate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYCoordinate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYCoordinate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYCoordinate::MergeFrom(const LYCoordinate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYCoordinate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYCoordinate::CopyFrom(const LYCoordinate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYCoordinate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LYCoordinate::Swap(LYCoordinate* other) {
  if (other != this) {
    std::swap(lng_, other->lng_);
    std::swap(lat_, other->lat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYCoordinate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYCoordinate_descriptor_;
  metadata.reflection = LYCoordinate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LYLocation::kLngFieldNumber;
const int LYLocation::kLatFieldNumber;
const int LYLocation::kNameFieldNumber;
const int LYLocation::kAdtFieldNumber;
#endif  // !_MSC_VER

LYLocation::LYLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYLocation::InitAsDefaultInstance() {
}

LYLocation::LYLocation(const LYLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYLocation::SharedCtor() {
  _cached_size_ = 0;
  lng_ = 0;
  lat_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYLocation::~LYLocation() {
  SharedDtor();
}

void LYLocation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (adt_ != &::google::protobuf::internal::kEmptyString) {
    delete adt_;
  }
  if (this != default_instance_) {
  }
}

void LYLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYLocation_descriptor_;
}

const LYLocation& LYLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYLocation* LYLocation::default_instance_ = NULL;

LYLocation* LYLocation::New() const {
  return new LYLocation;
}

void LYLocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lng_ = 0;
    lat_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_adt()) {
      if (adt_ != &::google::protobuf::internal::kEmptyString) {
        adt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lng = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }
      
      // required double lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_adt;
        break;
      }
      
      // optional string adt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adt().data(), this->adt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double lng = 1;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lng(), output);
  }
  
  // required double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string adt = 11;
  if (has_adt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adt().data(), this->adt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->adt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double lng = 1;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lng(), target);
  }
  
  // required double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string adt = 11;
  if (has_adt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adt().data(), this->adt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->adt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYLocation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double lng = 1;
    if (has_lng()) {
      total_size += 1 + 8;
    }
    
    // required double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string adt = 11;
    if (has_adt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYLocation::MergeFrom(const LYLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_adt()) {
      set_adt(from.adt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYLocation::CopyFrom(const LYLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LYLocation::Swap(LYLocation* other) {
  if (other != this) {
    std::swap(lng_, other->lng_);
    std::swap(lat_, other->lat_);
    std::swap(name_, other->name_);
    std::swap(adt_, other->adt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYLocation_descriptor_;
  metadata.reflection = LYLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LYSegment::kStartFieldNumber;
const int LYSegment::kEndFieldNumber;
const int LYSegment::kRoadFieldNumber;
#endif  // !_MSC_VER

LYSegment::LYSegment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYSegment::InitAsDefaultInstance() {
  start_ = const_cast< ::tss::LYCoordinate*>(&::tss::LYCoordinate::default_instance());
  end_ = const_cast< ::tss::LYCoordinate*>(&::tss::LYCoordinate::default_instance());
}

LYSegment::LYSegment(const LYSegment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYSegment::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
  road_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYSegment::~LYSegment() {
  SharedDtor();
}

void LYSegment::SharedDtor() {
  if (road_ != &::google::protobuf::internal::kEmptyString) {
    delete road_;
  }
  if (this != default_instance_) {
    delete start_;
    delete end_;
  }
}

void LYSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYSegment_descriptor_;
}

const LYSegment& LYSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYSegment* LYSegment::default_instance_ = NULL;

LYSegment* LYSegment::New() const {
  return new LYSegment;
}

void LYSegment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start()) {
      if (start_ != NULL) start_->::tss::LYCoordinate::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::tss::LYCoordinate::Clear();
    }
    if (has_road()) {
      if (road_ != &::google::protobuf::internal::kEmptyString) {
        road_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tss.LYCoordinate start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }
      
      // required .tss.LYCoordinate end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_road;
        break;
      }
      
      // optional string road = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_road:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_road()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->road().data(), this->road().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tss.LYCoordinate start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start(), output);
  }
  
  // required .tss.LYCoordinate end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->end(), output);
  }
  
  // optional string road = 3;
  if (has_road()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->road().data(), this->road().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->road(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYSegment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tss.LYCoordinate start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start(), target);
  }
  
  // required .tss.LYCoordinate end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->end(), target);
  }
  
  // optional string road = 3;
  if (has_road()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->road().data(), this->road().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->road(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYSegment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tss.LYCoordinate start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }
    
    // required .tss.LYCoordinate end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }
    
    // optional string road = 3;
    if (has_road()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->road());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYSegment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYSegment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYSegment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYSegment::MergeFrom(const LYSegment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::tss::LYCoordinate::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::tss::LYCoordinate::MergeFrom(from.end());
    }
    if (from.has_road()) {
      set_road(from.road());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYSegment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYSegment::CopyFrom(const LYSegment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYSegment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_start()) {
    if (!this->start().IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  return true;
}

void LYSegment::Swap(LYSegment* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(road_, other->road_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYSegment_descriptor_;
  metadata.reflection = LYSegment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LYRoute::kIdentityFieldNumber;
const int LYRoute::kSegmentsFieldNumber;
#endif  // !_MSC_VER

LYRoute::LYRoute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYRoute::InitAsDefaultInstance() {
}

LYRoute::LYRoute(const LYRoute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYRoute::SharedCtor() {
  _cached_size_ = 0;
  identity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYRoute::~LYRoute() {
  SharedDtor();
}

void LYRoute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LYRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYRoute_descriptor_;
}

const LYRoute& LYRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYRoute* LYRoute::default_instance_ = NULL;

LYRoute* LYRoute::New() const {
  return new LYRoute;
}

void LYRoute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    identity_ = 0;
  }
  segments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 identity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_segments;
        break;
      }
      
      // repeated .tss.LYSegment segments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_segments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 identity = 1;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->identity(), output);
  }
  
  // repeated .tss.LYSegment segments = 2;
  for (int i = 0; i < this->segments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->segments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 identity = 1;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->identity(), target);
  }
  
  // repeated .tss.LYSegment segments = 2;
  for (int i = 0; i < this->segments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->segments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYRoute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 identity = 1;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identity());
    }
    
  }
  // repeated .tss.LYSegment segments = 2;
  total_size += 1 * this->segments_size();
  for (int i = 0; i < this->segments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYRoute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYRoute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYRoute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYRoute::MergeFrom(const LYRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  segments_.MergeFrom(from.segments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identity()) {
      set_identity(from.identity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYRoute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYRoute::CopyFrom(const LYRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < segments_size(); i++) {
    if (!this->segments(i).IsInitialized()) return false;
  }
  return true;
}

void LYRoute::Swap(LYRoute* other) {
  if (other != this) {
    std::swap(identity_, other->identity_);
    segments_.Swap(&other->segments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYRoute_descriptor_;
  metadata.reflection = LYRoute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LYSegmentTraffic::kSegmentFieldNumber;
const int LYSegmentTraffic::kTimestampFieldNumber;
const int LYSegmentTraffic::kDirectionFieldNumber;
const int LYSegmentTraffic::kSpeedFieldNumber;
const int LYSegmentTraffic::kDetailsFieldNumber;
#endif  // !_MSC_VER

LYSegmentTraffic::LYSegmentTraffic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYSegmentTraffic::InitAsDefaultInstance() {
  segment_ = const_cast< ::tss::LYSegment*>(&::tss::LYSegment::default_instance());
}

LYSegmentTraffic::LYSegmentTraffic(const LYSegmentTraffic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYSegmentTraffic::SharedCtor() {
  _cached_size_ = 0;
  segment_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  direction_ = 0;
  speed_ = 0;
  details_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYSegmentTraffic::~LYSegmentTraffic() {
  SharedDtor();
}

void LYSegmentTraffic::SharedDtor() {
  if (details_ != &::google::protobuf::internal::kEmptyString) {
    delete details_;
  }
  if (this != default_instance_) {
    delete segment_;
  }
}

void LYSegmentTraffic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYSegmentTraffic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYSegmentTraffic_descriptor_;
}

const LYSegmentTraffic& LYSegmentTraffic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYSegmentTraffic* LYSegmentTraffic::default_instance_ = NULL;

LYSegmentTraffic* LYSegmentTraffic::New() const {
  return new LYSegmentTraffic;
}

void LYSegmentTraffic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_segment()) {
      if (segment_ != NULL) segment_->::tss::LYSegment::Clear();
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    direction_ = 0;
    speed_ = 0;
    if (has_details()) {
      if (details_ != &::google::protobuf::internal::kEmptyString) {
        details_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYSegmentTraffic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tss.LYSegment segment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }
      
      // optional int64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_direction;
        break;
      }
      
      // required .tss.LYDirection direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (tss::LYDirection_IsValid(value)) {
            set_direction(static_cast< tss::LYDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_speed;
        break;
      }
      
      // required int32 speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_details;
        break;
      }
      
      // optional string details = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->details().data(), this->details().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYSegmentTraffic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tss.LYSegment segment = 1;
  if (has_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segment(), output);
  }
  
  // optional int64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }
  
  // required .tss.LYDirection direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }
  
  // required int32 speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->speed(), output);
  }
  
  // optional string details = 11;
  if (has_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details().data(), this->details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->details(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYSegmentTraffic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tss.LYSegment segment = 1;
  if (has_segment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->segment(), target);
  }
  
  // optional int64 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }
  
  // required .tss.LYDirection direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction(), target);
  }
  
  // required int32 speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->speed(), target);
  }
  
  // optional string details = 11;
  if (has_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details().data(), this->details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->details(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYSegmentTraffic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tss.LYSegment segment = 1;
    if (has_segment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segment());
    }
    
    // optional int64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
    // required .tss.LYDirection direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }
    
    // required int32 speed = 5;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }
    
    // optional string details = 11;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->details());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYSegmentTraffic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYSegmentTraffic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYSegmentTraffic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYSegmentTraffic::MergeFrom(const LYSegmentTraffic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segment()) {
      mutable_segment()->::tss::LYSegment::MergeFrom(from.segment());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_details()) {
      set_details(from.details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYSegmentTraffic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYSegmentTraffic::CopyFrom(const LYSegmentTraffic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYSegmentTraffic::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  if (has_segment()) {
    if (!this->segment().IsInitialized()) return false;
  }
  return true;
}

void LYSegmentTraffic::Swap(LYSegmentTraffic* other) {
  if (other != this) {
    std::swap(segment_, other->segment_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(direction_, other->direction_);
    std::swap(speed_, other->speed_);
    std::swap(details_, other->details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYSegmentTraffic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYSegmentTraffic_descriptor_;
  metadata.reflection = LYSegmentTraffic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LYRoadTraffic::kRoadFieldNumber;
const int LYRoadTraffic::kTimestampFieldNumber;
const int LYRoadTraffic::kSegmentTrafficsFieldNumber;
const int LYRoadTraffic::kHrefFieldNumber;
const int LYRoadTraffic::kDescFieldNumber;
#endif  // !_MSC_VER

LYRoadTraffic::LYRoadTraffic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYRoadTraffic::InitAsDefaultInstance() {
}

LYRoadTraffic::LYRoadTraffic(const LYRoadTraffic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYRoadTraffic::SharedCtor() {
  _cached_size_ = 0;
  road_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_LONGLONG(0);
  href_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYRoadTraffic::~LYRoadTraffic() {
  SharedDtor();
}

void LYRoadTraffic::SharedDtor() {
  if (road_ != &::google::protobuf::internal::kEmptyString) {
    delete road_;
  }
  if (href_ != &::google::protobuf::internal::kEmptyString) {
    delete href_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void LYRoadTraffic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYRoadTraffic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYRoadTraffic_descriptor_;
}

const LYRoadTraffic& LYRoadTraffic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYRoadTraffic* LYRoadTraffic::default_instance_ = NULL;

LYRoadTraffic* LYRoadTraffic::New() const {
  return new LYRoadTraffic;
}

void LYRoadTraffic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_road()) {
      if (road_ != &::google::protobuf::internal::kEmptyString) {
        road_->clear();
      }
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_href()) {
      if (href_ != &::google::protobuf::internal::kEmptyString) {
        href_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  segment_traffics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYRoadTraffic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string road = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_road()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->road().data(), this->road().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }
      
      // optional int64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_segment_traffics;
        break;
      }
      
      // repeated .tss.LYSegmentTraffic segment_traffics = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segment_traffics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segment_traffics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_segment_traffics;
        if (input->ExpectTag(90)) goto parse_desc;
        break;
      }
      
      // optional string desc = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_href;
        break;
      }
      
      // optional string href = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_href:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_href()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->href().data(), this->href().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYRoadTraffic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string road = 1;
  if (has_road()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->road().data(), this->road().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->road(), output);
  }
  
  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }
  
  // repeated .tss.LYSegmentTraffic segment_traffics = 3;
  for (int i = 0; i < this->segment_traffics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->segment_traffics(i), output);
  }
  
  // optional string desc = 11;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->desc(), output);
  }
  
  // optional string href = 12;
  if (has_href()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->href().data(), this->href().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->href(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYRoadTraffic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string road = 1;
  if (has_road()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->road().data(), this->road().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->road(), target);
  }
  
  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }
  
  // repeated .tss.LYSegmentTraffic segment_traffics = 3;
  for (int i = 0; i < this->segment_traffics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->segment_traffics(i), target);
  }
  
  // optional string desc = 11;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->desc(), target);
  }
  
  // optional string href = 12;
  if (has_href()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->href().data(), this->href().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->href(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYRoadTraffic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string road = 1;
    if (has_road()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->road());
    }
    
    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
    // optional string href = 12;
    if (has_href()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->href());
    }
    
    // optional string desc = 11;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
  }
  // repeated .tss.LYSegmentTraffic segment_traffics = 3;
  total_size += 1 * this->segment_traffics_size();
  for (int i = 0; i < this->segment_traffics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segment_traffics(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYRoadTraffic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYRoadTraffic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYRoadTraffic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYRoadTraffic::MergeFrom(const LYRoadTraffic& from) {
  GOOGLE_CHECK_NE(&from, this);
  segment_traffics_.MergeFrom(from.segment_traffics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_road()) {
      set_road(from.road());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_href()) {
      set_href(from.href());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYRoadTraffic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYRoadTraffic::CopyFrom(const LYRoadTraffic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYRoadTraffic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < segment_traffics_size(); i++) {
    if (!this->segment_traffics(i).IsInitialized()) return false;
  }
  return true;
}

void LYRoadTraffic::Swap(LYRoadTraffic* other) {
  if (other != this) {
    std::swap(road_, other->road_);
    std::swap(timestamp_, other->timestamp_);
    segment_traffics_.Swap(&other->segment_traffics_);
    std::swap(href_, other->href_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYRoadTraffic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYRoadTraffic_descriptor_;
  metadata.reflection = LYRoadTraffic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LYCityTraffic::kCityFieldNumber;
const int LYCityTraffic::kTimestampFieldNumber;
const int LYCityTraffic::kRoadTrafficsFieldNumber;
#endif  // !_MSC_VER

LYCityTraffic::LYCityTraffic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYCityTraffic::InitAsDefaultInstance() {
}

LYCityTraffic::LYCityTraffic(const LYCityTraffic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYCityTraffic::SharedCtor() {
  _cached_size_ = 0;
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYCityTraffic::~LYCityTraffic() {
  SharedDtor();
}

void LYCityTraffic::SharedDtor() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void LYCityTraffic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYCityTraffic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYCityTraffic_descriptor_;
}

const LYCityTraffic& LYCityTraffic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYCityTraffic* LYCityTraffic::default_instance_ = NULL;

LYCityTraffic* LYCityTraffic::New() const {
  return new LYCityTraffic;
}

void LYCityTraffic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  road_traffics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYCityTraffic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string city = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }
      
      // optional int64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_road_traffics;
        break;
      }
      
      // repeated .tss.LYRoadTraffic road_traffics = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_road_traffics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_road_traffics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_road_traffics;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYCityTraffic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string city = 1;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->city(), output);
  }
  
  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }
  
  // repeated .tss.LYRoadTraffic road_traffics = 3;
  for (int i = 0; i < this->road_traffics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->road_traffics(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYCityTraffic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string city = 1;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->city(), target);
  }
  
  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }
  
  // repeated .tss.LYRoadTraffic road_traffics = 3;
  for (int i = 0; i < this->road_traffics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->road_traffics(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYCityTraffic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string city = 1;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }
    
    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
  }
  // repeated .tss.LYRoadTraffic road_traffics = 3;
  total_size += 1 * this->road_traffics_size();
  for (int i = 0; i < this->road_traffics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->road_traffics(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYCityTraffic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYCityTraffic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYCityTraffic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYCityTraffic::MergeFrom(const LYCityTraffic& from) {
  GOOGLE_CHECK_NE(&from, this);
  road_traffics_.MergeFrom(from.road_traffics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYCityTraffic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYCityTraffic::CopyFrom(const LYCityTraffic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYCityTraffic::IsInitialized() const {
  
  for (int i = 0; i < road_traffics_size(); i++) {
    if (!this->road_traffics(i).IsInitialized()) return false;
  }
  return true;
}

void LYCityTraffic::Swap(LYCityTraffic* other) {
  if (other != this) {
    std::swap(city_, other->city_);
    std::swap(timestamp_, other->timestamp_);
    road_traffics_.Swap(&other->road_traffics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYCityTraffic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYCityTraffic_descriptor_;
  metadata.reflection = LYCityTraffic_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LYCrontab_LYCronType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYCrontab_LYCronType_descriptor_;
}
bool LYCrontab_LYCronType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LYCrontab_LYCronType LYCrontab::LY_REP_MINUTE;
const LYCrontab_LYCronType LYCrontab::LY_REP_HOUR;
const LYCrontab_LYCronType LYCrontab::LY_REP_DOM;
const LYCrontab_LYCronType LYCrontab::LY_REP_MONTH;
const LYCrontab_LYCronType LYCrontab::LY_REP_DOW;
const LYCrontab_LYCronType LYCrontab::LYCronType_MIN;
const LYCrontab_LYCronType LYCrontab::LYCronType_MAX;
const int LYCrontab::LYCronType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LYCrontab::kCronTypeFieldNumber;
const int LYCrontab::kMinuteFieldNumber;
const int LYCrontab::kHourFieldNumber;
const int LYCrontab::kDomFieldNumber;
const int LYCrontab::kMonthFieldNumber;
const int LYCrontab::kDowFieldNumber;
#endif  // !_MSC_VER

LYCrontab::LYCrontab()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYCrontab::InitAsDefaultInstance() {
}

LYCrontab::LYCrontab(const LYCrontab& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYCrontab::SharedCtor() {
  _cached_size_ = 0;
  cron_type_ = 1;
  minute_ = GOOGLE_LONGLONG(0);
  hour_ = GOOGLE_LONGLONG(0);
  dom_ = 0;
  month_ = 0;
  dow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYCrontab::~LYCrontab() {
  SharedDtor();
}

void LYCrontab::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LYCrontab::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYCrontab::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYCrontab_descriptor_;
}

const LYCrontab& LYCrontab::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYCrontab* LYCrontab::default_instance_ = NULL;

LYCrontab* LYCrontab::New() const {
  return new LYCrontab;
}

void LYCrontab::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cron_type_ = 1;
    minute_ = GOOGLE_LONGLONG(0);
    hour_ = GOOGLE_LONGLONG(0);
    dom_ = 0;
    month_ = 0;
    dow_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYCrontab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tss.LYCrontab.LYCronType cron_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tss::LYCrontab_LYCronType_IsValid(value)) {
            set_cron_type(static_cast< ::tss::LYCrontab_LYCronType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minute;
        break;
      }
      
      // optional int64 minute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hour;
        break;
      }
      
      // optional int64 hour = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dom;
        break;
      }
      
      // optional int32 dom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dom_)));
          set_has_dom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_month;
        break;
      }
      
      // optional int32 month = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dow;
        break;
      }
      
      // optional int32 dow = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dow_)));
          set_has_dow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYCrontab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tss.LYCrontab.LYCronType cron_type = 1;
  if (has_cron_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cron_type(), output);
  }
  
  // optional int64 minute = 2;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->minute(), output);
  }
  
  // optional int64 hour = 3;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hour(), output);
  }
  
  // optional int32 dom = 4;
  if (has_dom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dom(), output);
  }
  
  // optional int32 month = 5;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->month(), output);
  }
  
  // optional int32 dow = 6;
  if (has_dow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYCrontab::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tss.LYCrontab.LYCronType cron_type = 1;
  if (has_cron_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cron_type(), target);
  }
  
  // optional int64 minute = 2;
  if (has_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->minute(), target);
  }
  
  // optional int64 hour = 3;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hour(), target);
  }
  
  // optional int32 dom = 4;
  if (has_dom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dom(), target);
  }
  
  // optional int32 month = 5;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->month(), target);
  }
  
  // optional int32 dow = 6;
  if (has_dow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYCrontab::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tss.LYCrontab.LYCronType cron_type = 1;
    if (has_cron_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cron_type());
    }
    
    // optional int64 minute = 2;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minute());
    }
    
    // optional int64 hour = 3;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hour());
    }
    
    // optional int32 dom = 4;
    if (has_dom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dom());
    }
    
    // optional int32 month = 5;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }
    
    // optional int32 dow = 6;
    if (has_dow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dow());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYCrontab::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYCrontab* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYCrontab*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYCrontab::MergeFrom(const LYCrontab& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cron_type()) {
      set_cron_type(from.cron_type());
    }
    if (from.has_minute()) {
      set_minute(from.minute());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_dom()) {
      set_dom(from.dom());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_dow()) {
      set_dow(from.dow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYCrontab::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYCrontab::CopyFrom(const LYCrontab& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYCrontab::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LYCrontab::Swap(LYCrontab* other) {
  if (other != this) {
    std::swap(cron_type_, other->cron_type_);
    std::swap(minute_, other->minute_);
    std::swap(hour_, other->hour_);
    std::swap(dom_, other->dom_);
    std::swap(month_, other->month_);
    std::swap(dow_, other->dow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYCrontab::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYCrontab_descriptor_;
  metadata.reflection = LYCrontab_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LYTrafficSub_LYOprType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYTrafficSub_LYOprType_descriptor_;
}
bool LYTrafficSub_LYOprType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LYTrafficSub_LYOprType LYTrafficSub::LY_SUB_CREATE;
const LYTrafficSub_LYOprType LYTrafficSub::LY_SUB_DELETE;
const LYTrafficSub_LYOprType LYTrafficSub::LY_SUB_UPDATE;
const LYTrafficSub_LYOprType LYTrafficSub::LYOprType_MIN;
const LYTrafficSub_LYOprType LYTrafficSub::LYOprType_MAX;
const int LYTrafficSub::LYOprType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LYTrafficSub_LYPubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYTrafficSub_LYPubType_descriptor_;
}
bool LYTrafficSub_LYPubType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LYTrafficSub_LYPubType LYTrafficSub::LY_PUB_ADHOC;
const LYTrafficSub_LYPubType LYTrafficSub::LY_PUB_EVENT;
const LYTrafficSub_LYPubType LYTrafficSub::LY_PUB_CRON;
const LYTrafficSub_LYPubType LYTrafficSub::LYPubType_MIN;
const LYTrafficSub_LYPubType LYTrafficSub::LYPubType_MAX;
const int LYTrafficSub::LYPubType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LYTrafficSub::kCityFieldNumber;
const int LYTrafficSub::kRouteFieldNumber;
const int LYTrafficSub::kOprTypeFieldNumber;
const int LYTrafficSub::kPubTypeFieldNumber;
const int LYTrafficSub::kExpiresFieldNumber;
const int LYTrafficSub::kCronTabFieldNumber;
#endif  // !_MSC_VER

LYTrafficSub::LYTrafficSub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYTrafficSub::InitAsDefaultInstance() {
  route_ = const_cast< ::tss::LYRoute*>(&::tss::LYRoute::default_instance());
  cron_tab_ = const_cast< ::tss::LYCrontab*>(&::tss::LYCrontab::default_instance());
}

LYTrafficSub::LYTrafficSub(const LYTrafficSub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYTrafficSub::SharedCtor() {
  _cached_size_ = 0;
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  route_ = NULL;
  opr_type_ = 1;
  pub_type_ = 1;
  expires_ = 30;
  cron_tab_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYTrafficSub::~LYTrafficSub() {
  SharedDtor();
}

void LYTrafficSub::SharedDtor() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (this != default_instance_) {
    delete route_;
    delete cron_tab_;
  }
}

void LYTrafficSub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYTrafficSub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYTrafficSub_descriptor_;
}

const LYTrafficSub& LYTrafficSub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYTrafficSub* LYTrafficSub::default_instance_ = NULL;

LYTrafficSub* LYTrafficSub::New() const {
  return new LYTrafficSub;
}

void LYTrafficSub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_route()) {
      if (route_ != NULL) route_->::tss::LYRoute::Clear();
    }
    opr_type_ = 1;
    pub_type_ = 1;
    expires_ = 30;
    if (has_cron_tab()) {
      if (cron_tab_ != NULL) cron_tab_->::tss::LYCrontab::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYTrafficSub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string city = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_route;
        break;
      }
      
      // required .tss.LYRoute route = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opr_type;
        break;
      }
      
      // required .tss.LYTrafficSub.LYOprType opr_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opr_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tss::LYTrafficSub_LYOprType_IsValid(value)) {
            set_opr_type(static_cast< ::tss::LYTrafficSub_LYOprType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pub_type;
        break;
      }
      
      // required .tss.LYTrafficSub.LYPubType pub_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pub_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tss::LYTrafficSub_LYPubType_IsValid(value)) {
            set_pub_type(static_cast< ::tss::LYTrafficSub_LYPubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_expires;
        break;
      }
      
      // optional int32 expires = 5 [default = 30];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expires:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expires_)));
          set_has_expires();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cron_tab;
        break;
      }
      
      // optional .tss.LYCrontab cron_tab = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cron_tab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cron_tab()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYTrafficSub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string city = 1;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->city(), output);
  }
  
  // required .tss.LYRoute route = 2;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->route(), output);
  }
  
  // required .tss.LYTrafficSub.LYOprType opr_type = 3;
  if (has_opr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opr_type(), output);
  }
  
  // required .tss.LYTrafficSub.LYPubType pub_type = 4;
  if (has_pub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->pub_type(), output);
  }
  
  // optional int32 expires = 5 [default = 30];
  if (has_expires()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->expires(), output);
  }
  
  // optional .tss.LYCrontab cron_tab = 6;
  if (has_cron_tab()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cron_tab(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYTrafficSub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string city = 1;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->city(), target);
  }
  
  // required .tss.LYRoute route = 2;
  if (has_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->route(), target);
  }
  
  // required .tss.LYTrafficSub.LYOprType opr_type = 3;
  if (has_opr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opr_type(), target);
  }
  
  // required .tss.LYTrafficSub.LYPubType pub_type = 4;
  if (has_pub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->pub_type(), target);
  }
  
  // optional int32 expires = 5 [default = 30];
  if (has_expires()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->expires(), target);
  }
  
  // optional .tss.LYCrontab cron_tab = 6;
  if (has_cron_tab()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cron_tab(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYTrafficSub::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string city = 1;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }
    
    // required .tss.LYRoute route = 2;
    if (has_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->route());
    }
    
    // required .tss.LYTrafficSub.LYOprType opr_type = 3;
    if (has_opr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opr_type());
    }
    
    // required .tss.LYTrafficSub.LYPubType pub_type = 4;
    if (has_pub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pub_type());
    }
    
    // optional int32 expires = 5 [default = 30];
    if (has_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expires());
    }
    
    // optional .tss.LYCrontab cron_tab = 6;
    if (has_cron_tab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cron_tab());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYTrafficSub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYTrafficSub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYTrafficSub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYTrafficSub::MergeFrom(const LYTrafficSub& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_route()) {
      mutable_route()->::tss::LYRoute::MergeFrom(from.route());
    }
    if (from.has_opr_type()) {
      set_opr_type(from.opr_type());
    }
    if (from.has_pub_type()) {
      set_pub_type(from.pub_type());
    }
    if (from.has_expires()) {
      set_expires(from.expires());
    }
    if (from.has_cron_tab()) {
      mutable_cron_tab()->::tss::LYCrontab::MergeFrom(from.cron_tab());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYTrafficSub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYTrafficSub::CopyFrom(const LYTrafficSub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYTrafficSub::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_route()) {
    if (!this->route().IsInitialized()) return false;
  }
  if (has_cron_tab()) {
    if (!this->cron_tab().IsInitialized()) return false;
  }
  return true;
}

void LYTrafficSub::Swap(LYTrafficSub* other) {
  if (other != this) {
    std::swap(city_, other->city_);
    std::swap(route_, other->route_);
    std::swap(opr_type_, other->opr_type_);
    std::swap(pub_type_, other->pub_type_);
    std::swap(expires_, other->expires_);
    std::swap(cron_tab_, other->cron_tab_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYTrafficSub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYTrafficSub_descriptor_;
  metadata.reflection = LYTrafficSub_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LYTrafficPub::kRouteIdFieldNumber;
const int LYTrafficPub::kCityTrafficFieldNumber;
#endif  // !_MSC_VER

LYTrafficPub::LYTrafficPub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYTrafficPub::InitAsDefaultInstance() {
  city_traffic_ = const_cast< ::tss::LYCityTraffic*>(&::tss::LYCityTraffic::default_instance());
}

LYTrafficPub::LYTrafficPub(const LYTrafficPub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYTrafficPub::SharedCtor() {
  _cached_size_ = 0;
  route_id_ = 0;
  city_traffic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYTrafficPub::~LYTrafficPub() {
  SharedDtor();
}

void LYTrafficPub::SharedDtor() {
  if (this != default_instance_) {
    delete city_traffic_;
  }
}

void LYTrafficPub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYTrafficPub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYTrafficPub_descriptor_;
}

const LYTrafficPub& LYTrafficPub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYTrafficPub* LYTrafficPub::default_instance_ = NULL;

LYTrafficPub* LYTrafficPub::New() const {
  return new LYTrafficPub;
}

void LYTrafficPub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    route_id_ = 0;
    if (has_city_traffic()) {
      if (city_traffic_ != NULL) city_traffic_->::tss::LYCityTraffic::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYTrafficPub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 route_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_id_)));
          set_has_route_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_city_traffic;
        break;
      }
      
      // required .tss.LYCityTraffic city_traffic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_traffic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city_traffic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYTrafficPub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 route_id = 1;
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->route_id(), output);
  }
  
  // required .tss.LYCityTraffic city_traffic = 2;
  if (has_city_traffic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->city_traffic(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYTrafficPub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 route_id = 1;
  if (has_route_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->route_id(), target);
  }
  
  // required .tss.LYCityTraffic city_traffic = 2;
  if (has_city_traffic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->city_traffic(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYTrafficPub::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 route_id = 1;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->route_id());
    }
    
    // required .tss.LYCityTraffic city_traffic = 2;
    if (has_city_traffic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city_traffic());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYTrafficPub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYTrafficPub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYTrafficPub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYTrafficPub::MergeFrom(const LYTrafficPub& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_route_id()) {
      set_route_id(from.route_id());
    }
    if (from.has_city_traffic()) {
      mutable_city_traffic()->::tss::LYCityTraffic::MergeFrom(from.city_traffic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYTrafficPub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYTrafficPub::CopyFrom(const LYTrafficPub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYTrafficPub::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_city_traffic()) {
    if (!this->city_traffic().IsInitialized()) return false;
  }
  return true;
}

void LYTrafficPub::Swap(LYTrafficPub* other) {
  if (other != this) {
    std::swap(route_id_, other->route_id_);
    std::swap(city_traffic_, other->city_traffic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYTrafficPub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYTrafficPub_descriptor_;
  metadata.reflection = LYTrafficPub_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LYDeviceReport::kDeviceIdFieldNumber;
const int LYDeviceReport::kDeviceTokenFieldNumber;
const int LYDeviceReport::kDeviceNameFieldNumber;
const int LYDeviceReport::kDeviceModelFieldNumber;
const int LYDeviceReport::kDeviceOsVersionFieldNumber;
#endif  // !_MSC_VER

LYDeviceReport::LYDeviceReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYDeviceReport::InitAsDefaultInstance() {
}

LYDeviceReport::LYDeviceReport(const LYDeviceReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYDeviceReport::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYDeviceReport::~LYDeviceReport() {
  SharedDtor();
}

void LYDeviceReport::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_token_ != &::google::protobuf::internal::kEmptyString) {
    delete device_token_;
  }
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete device_name_;
  }
  if (device_model_ != &::google::protobuf::internal::kEmptyString) {
    delete device_model_;
  }
  if (device_os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete device_os_version_;
  }
  if (this != default_instance_) {
  }
}

void LYDeviceReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYDeviceReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYDeviceReport_descriptor_;
}

const LYDeviceReport& LYDeviceReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYDeviceReport* LYDeviceReport::default_instance_ = NULL;

LYDeviceReport* LYDeviceReport::New() const {
  return new LYDeviceReport;
}

void LYDeviceReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_device_token()) {
      if (device_token_ != &::google::protobuf::internal::kEmptyString) {
        device_token_->clear();
      }
    }
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::kEmptyString) {
        device_name_->clear();
      }
    }
    if (has_device_model()) {
      if (device_model_ != &::google::protobuf::internal::kEmptyString) {
        device_model_->clear();
      }
    }
    if (has_device_os_version()) {
      if (device_os_version_ != &::google::protobuf::internal::kEmptyString) {
        device_os_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYDeviceReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_token;
        break;
      }
      
      // required bytes device_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_device_name;
        break;
      }
      
      // required string device_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device_model;
        break;
      }
      
      // required string device_model = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_model().data(), this->device_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_os_version;
        break;
      }
      
      // required string device_os_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_os_version().data(), this->device_os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYDeviceReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }
  
  // required bytes device_token = 2;
  if (has_device_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->device_token(), output);
  }
  
  // required string device_name = 3;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->device_name(), output);
  }
  
  // required string device_model = 4;
  if (has_device_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_model().data(), this->device_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_model(), output);
  }
  
  // required string device_os_version = 5;
  if (has_device_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_os_version().data(), this->device_os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->device_os_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYDeviceReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }
  
  // required bytes device_token = 2;
  if (has_device_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->device_token(), target);
  }
  
  // required string device_name = 3;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_name(), target);
  }
  
  // required string device_model = 4;
  if (has_device_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_model().data(), this->device_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device_model(), target);
  }
  
  // required string device_os_version = 5;
  if (has_device_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_os_version().data(), this->device_os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_os_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYDeviceReport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }
    
    // required bytes device_token = 2;
    if (has_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_token());
    }
    
    // required string device_name = 3;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }
    
    // required string device_model = 4;
    if (has_device_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_model());
    }
    
    // required string device_os_version = 5;
    if (has_device_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_os_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYDeviceReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYDeviceReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYDeviceReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYDeviceReport::MergeFrom(const LYDeviceReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_device_token()) {
      set_device_token(from.device_token());
    }
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
    if (from.has_device_model()) {
      set_device_model(from.device_model());
    }
    if (from.has_device_os_version()) {
      set_device_os_version(from.device_os_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYDeviceReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYDeviceReport::CopyFrom(const LYDeviceReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYDeviceReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void LYDeviceReport::Swap(LYDeviceReport* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(device_token_, other->device_token_);
    std::swap(device_name_, other->device_name_);
    std::swap(device_model_, other->device_model_);
    std::swap(device_os_version_, other->device_os_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYDeviceReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYDeviceReport_descriptor_;
  metadata.reflection = LYDeviceReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LYCheckin::kDeviceModelFieldNumber;
const int LYCheckin::kOsTypeFieldNumber;
const int LYCheckin::kOsVersionFieldNumber;
const int LYCheckin::kLyMajorReleaseFieldNumber;
const int LYCheckin::kLyMinorReleaseFieldNumber;
const int LYCheckin::kDownloadUrlFieldNumber;
#endif  // !_MSC_VER

LYCheckin::LYCheckin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYCheckin::InitAsDefaultInstance() {
}

LYCheckin::LYCheckin(const LYCheckin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYCheckin::SharedCtor() {
  _cached_size_ = 0;
  device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_type_ = 0;
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ly_major_release_ = 0;
  ly_minor_release_ = 0;
  download_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYCheckin::~LYCheckin() {
  SharedDtor();
}

void LYCheckin::SharedDtor() {
  if (device_model_ != &::google::protobuf::internal::kEmptyString) {
    delete device_model_;
  }
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (download_url_ != &::google::protobuf::internal::kEmptyString) {
    delete download_url_;
  }
  if (this != default_instance_) {
  }
}

void LYCheckin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYCheckin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYCheckin_descriptor_;
}

const LYCheckin& LYCheckin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYCheckin* LYCheckin::default_instance_ = NULL;

LYCheckin* LYCheckin::New() const {
  return new LYCheckin;
}

void LYCheckin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_model()) {
      if (device_model_ != &::google::protobuf::internal::kEmptyString) {
        device_model_->clear();
      }
    }
    os_type_ = 0;
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::kEmptyString) {
        os_version_->clear();
      }
    }
    ly_major_release_ = 0;
    ly_minor_release_ = 0;
    if (has_download_url()) {
      if (download_url_ != &::google::protobuf::internal::kEmptyString) {
        download_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYCheckin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_model = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_model().data(), this->device_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_os_type;
        break;
      }
      
      // required .tss.LYOsType os_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_os_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (tss::LYOsType_IsValid(value)) {
            set_os_type(static_cast< tss::LYOsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }
      
      // optional string os_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ly_major_release;
        break;
      }
      
      // required int32 ly_major_release = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ly_major_release:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ly_major_release_)));
          set_has_ly_major_release();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ly_minor_release;
        break;
      }
      
      // required int32 ly_minor_release = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ly_minor_release:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ly_minor_release_)));
          set_has_ly_minor_release();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_download_url;
        break;
      }
      
      // optional string download_url = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->download_url().data(), this->download_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYCheckin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_model = 1;
  if (has_device_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_model().data(), this->device_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_model(), output);
  }
  
  // required .tss.LYOsType os_type = 2;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->os_type(), output);
  }
  
  // optional string os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->os_version(), output);
  }
  
  // required int32 ly_major_release = 4;
  if (has_ly_major_release()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ly_major_release(), output);
  }
  
  // required int32 ly_minor_release = 5;
  if (has_ly_minor_release()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ly_minor_release(), output);
  }
  
  // optional string download_url = 6;
  if (has_download_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->download_url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYCheckin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_model = 1;
  if (has_device_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_model().data(), this->device_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_model(), target);
  }
  
  // required .tss.LYOsType os_type = 2;
  if (has_os_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->os_type(), target);
  }
  
  // optional string os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->os_version(), target);
  }
  
  // required int32 ly_major_release = 4;
  if (has_ly_major_release()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ly_major_release(), target);
  }
  
  // required int32 ly_minor_release = 5;
  if (has_ly_minor_release()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ly_minor_release(), target);
  }
  
  // optional string download_url = 6;
  if (has_download_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->download_url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYCheckin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_model = 1;
    if (has_device_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_model());
    }
    
    // required .tss.LYOsType os_type = 2;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->os_type());
    }
    
    // optional string os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }
    
    // required int32 ly_major_release = 4;
    if (has_ly_major_release()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ly_major_release());
    }
    
    // required int32 ly_minor_release = 5;
    if (has_ly_minor_release()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ly_minor_release());
    }
    
    // optional string download_url = 6;
    if (has_download_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYCheckin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYCheckin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYCheckin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYCheckin::MergeFrom(const LYCheckin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_model()) {
      set_device_model(from.device_model());
    }
    if (from.has_os_type()) {
      set_os_type(from.os_type());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_ly_major_release()) {
      set_ly_major_release(from.ly_major_release());
    }
    if (from.has_ly_minor_release()) {
      set_ly_minor_release(from.ly_minor_release());
    }
    if (from.has_download_url()) {
      set_download_url(from.download_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYCheckin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYCheckin::CopyFrom(const LYCheckin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYCheckin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001a) != 0x0000001a) return false;
  
  return true;
}

void LYCheckin::Swap(LYCheckin* other) {
  if (other != this) {
    std::swap(device_model_, other->device_model_);
    std::swap(os_type_, other->os_type_);
    std::swap(os_version_, other->os_version_);
    std::swap(ly_major_release_, other->ly_major_release_);
    std::swap(ly_minor_release_, other->ly_minor_release_);
    std::swap(download_url_, other->download_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYCheckin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYCheckin_descriptor_;
  metadata.reflection = LYCheckin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LYSamplePoint::kSpCoordinateFieldNumber;
const int LYSamplePoint::kTimestampFieldNumber;
const int LYSamplePoint::kAltitudeFieldNumber;
const int LYSamplePoint::kCourseFieldNumber;
#endif  // !_MSC_VER

LYSamplePoint::LYSamplePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYSamplePoint::InitAsDefaultInstance() {
  sp_coordinate_ = const_cast< ::tss::LYCoordinate*>(&::tss::LYCoordinate::default_instance());
}

LYSamplePoint::LYSamplePoint(const LYSamplePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYSamplePoint::SharedCtor() {
  _cached_size_ = 0;
  sp_coordinate_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  altitude_ = 0;
  course_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYSamplePoint::~LYSamplePoint() {
  SharedDtor();
}

void LYSamplePoint::SharedDtor() {
  if (this != default_instance_) {
    delete sp_coordinate_;
  }
}

void LYSamplePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYSamplePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYSamplePoint_descriptor_;
}

const LYSamplePoint& LYSamplePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYSamplePoint* LYSamplePoint::default_instance_ = NULL;

LYSamplePoint* LYSamplePoint::New() const {
  return new LYSamplePoint;
}

void LYSamplePoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sp_coordinate()) {
      if (sp_coordinate_ != NULL) sp_coordinate_->::tss::LYCoordinate::Clear();
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    altitude_ = 0;
    course_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYSamplePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tss.LYCoordinate sp_coordinate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sp_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }
      
      // required int64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_altitude;
        break;
      }
      
      // optional double altitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_course;
        break;
      }
      
      // optional double course = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_course:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &course_)));
          set_has_course();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYSamplePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tss.LYCoordinate sp_coordinate = 1;
  if (has_sp_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sp_coordinate(), output);
  }
  
  // required int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }
  
  // optional double altitude = 3;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }
  
  // optional double course = 4;
  if (has_course()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->course(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYSamplePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tss.LYCoordinate sp_coordinate = 1;
  if (has_sp_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sp_coordinate(), target);
  }
  
  // required int64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }
  
  // optional double altitude = 3;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->altitude(), target);
  }
  
  // optional double course = 4;
  if (has_course()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->course(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYSamplePoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tss.LYCoordinate sp_coordinate = 1;
    if (has_sp_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sp_coordinate());
    }
    
    // required int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
    // optional double altitude = 3;
    if (has_altitude()) {
      total_size += 1 + 8;
    }
    
    // optional double course = 4;
    if (has_course()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYSamplePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYSamplePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYSamplePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYSamplePoint::MergeFrom(const LYSamplePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sp_coordinate()) {
      mutable_sp_coordinate()->::tss::LYCoordinate::MergeFrom(from.sp_coordinate());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_course()) {
      set_course(from.course());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYSamplePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYSamplePoint::CopyFrom(const LYSamplePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYSamplePoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_sp_coordinate()) {
    if (!this->sp_coordinate().IsInitialized()) return false;
  }
  return true;
}

void LYSamplePoint::Swap(LYSamplePoint* other) {
  if (other != this) {
    std::swap(sp_coordinate_, other->sp_coordinate_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(altitude_, other->altitude_);
    std::swap(course_, other->course_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYSamplePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYSamplePoint_descriptor_;
  metadata.reflection = LYSamplePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LYTrafficReport::kPointsFieldNumber;
#endif  // !_MSC_VER

LYTrafficReport::LYTrafficReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYTrafficReport::InitAsDefaultInstance() {
}

LYTrafficReport::LYTrafficReport(const LYTrafficReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYTrafficReport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYTrafficReport::~LYTrafficReport() {
  SharedDtor();
}

void LYTrafficReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LYTrafficReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYTrafficReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYTrafficReport_descriptor_;
}

const LYTrafficReport& LYTrafficReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYTrafficReport* LYTrafficReport::default_instance_ = NULL;

LYTrafficReport* LYTrafficReport::New() const {
  return new LYTrafficReport;
}

void LYTrafficReport::Clear() {
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYTrafficReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tss.LYSamplePoint points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYTrafficReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tss.LYSamplePoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYTrafficReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tss.LYSamplePoint points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYTrafficReport::ByteSize() const {
  int total_size = 0;
  
  // repeated .tss.LYSamplePoint points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYTrafficReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYTrafficReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYTrafficReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYTrafficReport::MergeFrom(const LYTrafficReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYTrafficReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYTrafficReport::CopyFrom(const LYTrafficReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYTrafficReport::IsInitialized() const {
  
  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void LYTrafficReport::Swap(LYTrafficReport* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LYTrafficReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYTrafficReport_descriptor_;
  metadata.reflection = LYTrafficReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LYMsgOnAir::kVersionFieldNumber;
const int LYMsgOnAir::kMsgIdFieldNumber;
const int LYMsgOnAir::kTimestampFieldNumber;
const int LYMsgOnAir::kFromPartyFieldNumber;
const int LYMsgOnAir::kToPartyFieldNumber;
const int LYMsgOnAir::kMsgTypeFieldNumber;
const int LYMsgOnAir::kSndIdFieldNumber;
const int LYMsgOnAir::kRcvIdFieldNumber;
const int LYMsgOnAir::kSignatureFieldNumber;
const int LYMsgOnAir::kRetCodeFieldNumber;
const int LYMsgOnAir::kCheckinFieldNumber;
const int LYMsgOnAir::kDeviceReportFieldNumber;
const int LYMsgOnAir::kTrafficSubFieldNumber;
const int LYMsgOnAir::kTrafficPubFieldNumber;
const int LYMsgOnAir::kTrafficReportFieldNumber;
#endif  // !_MSC_VER

LYMsgOnAir::LYMsgOnAir()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LYMsgOnAir::InitAsDefaultInstance() {
  checkin_ = const_cast< ::tss::LYCheckin*>(&::tss::LYCheckin::default_instance());
  device_report_ = const_cast< ::tss::LYDeviceReport*>(&::tss::LYDeviceReport::default_instance());
  traffic_sub_ = const_cast< ::tss::LYTrafficSub*>(&::tss::LYTrafficSub::default_instance());
  traffic_pub_ = const_cast< ::tss::LYTrafficPub*>(&::tss::LYTrafficPub::default_instance());
  traffic_report_ = const_cast< ::tss::LYTrafficReport*>(&::tss::LYTrafficReport::default_instance());
}

LYMsgOnAir::LYMsgOnAir(const LYMsgOnAir& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LYMsgOnAir::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  msg_id_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  from_party_ = 1;
  to_party_ = 1;
  msg_type_ = 1;
  snd_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rcv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_code_ = 0;
  checkin_ = NULL;
  device_report_ = NULL;
  traffic_sub_ = NULL;
  traffic_pub_ = NULL;
  traffic_report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LYMsgOnAir::~LYMsgOnAir() {
  SharedDtor();
}

void LYMsgOnAir::SharedDtor() {
  if (snd_id_ != &::google::protobuf::internal::kEmptyString) {
    delete snd_id_;
  }
  if (rcv_id_ != &::google::protobuf::internal::kEmptyString) {
    delete rcv_id_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
    delete checkin_;
    delete device_report_;
    delete traffic_sub_;
    delete traffic_pub_;
    delete traffic_report_;
  }
}

void LYMsgOnAir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LYMsgOnAir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LYMsgOnAir_descriptor_;
}

const LYMsgOnAir& LYMsgOnAir::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tss_2eproto();  return *default_instance_;
}

LYMsgOnAir* LYMsgOnAir::default_instance_ = NULL;

LYMsgOnAir* LYMsgOnAir::New() const {
  return new LYMsgOnAir;
}

void LYMsgOnAir::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    msg_id_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    from_party_ = 1;
    to_party_ = 1;
    msg_type_ = 1;
    if (has_snd_id()) {
      if (snd_id_ != &::google::protobuf::internal::kEmptyString) {
        snd_id_->clear();
      }
    }
    if (has_rcv_id()) {
      if (rcv_id_ != &::google::protobuf::internal::kEmptyString) {
        rcv_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    ret_code_ = 0;
    if (has_checkin()) {
      if (checkin_ != NULL) checkin_->::tss::LYCheckin::Clear();
    }
    if (has_device_report()) {
      if (device_report_ != NULL) device_report_->::tss::LYDeviceReport::Clear();
    }
    if (has_traffic_sub()) {
      if (traffic_sub_ != NULL) traffic_sub_->::tss::LYTrafficSub::Clear();
    }
    if (has_traffic_pub()) {
      if (traffic_pub_ != NULL) traffic_pub_->::tss::LYTrafficPub::Clear();
    }
    if (has_traffic_report()) {
      if (traffic_report_ != NULL) traffic_report_->::tss::LYTrafficReport::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LYMsgOnAir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_party;
        break;
      }
      
      // required .tss.LYParty from_party = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_party:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (tss::LYParty_IsValid(value)) {
            set_from_party(static_cast< tss::LYParty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_party;
        break;
      }
      
      // required .tss.LYParty to_party = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_party:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (tss::LYParty_IsValid(value)) {
            set_to_party(static_cast< tss::LYParty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msg_type;
        break;
      }
      
      // required .tss.LYMsgType msg_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (tss::LYMsgType_IsValid(value)) {
            set_msg_type(static_cast< tss::LYMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_msg_id;
        break;
      }
      
      // required int32 msg_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }
      
      // required int64 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_snd_id;
        break;
      }
      
      // optional string snd_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snd_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snd_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snd_id().data(), this->snd_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rcv_id;
        break;
      }
      
      // optional string rcv_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rcv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rcv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rcv_id().data(), this->rcv_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_signature;
        break;
      }
      
      // optional bytes signature = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_ret_code;
        break;
      }
      
      // optional .tss.LYRetCode ret_code = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (tss::LYRetCode_IsValid(value)) {
            set_ret_code(static_cast< tss::LYRetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_checkin;
        break;
      }
      
      // optional .tss.LYCheckin checkin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checkin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_device_report;
        break;
      }
      
      // optional .tss.LYDeviceReport device_report = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_traffic_sub;
        break;
      }
      
      // optional .tss.LYTrafficSub traffic_sub = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traffic_sub:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_sub()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_traffic_pub;
        break;
      }
      
      // optional .tss.LYTrafficPub traffic_pub = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traffic_pub:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_pub()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_traffic_report;
        break;
      }
      
      // optional .tss.LYTrafficReport traffic_report = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traffic_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((1024u <= tag && tag < 2048u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LYMsgOnAir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  // required .tss.LYParty from_party = 2;
  if (has_from_party()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->from_party(), output);
  }
  
  // required .tss.LYParty to_party = 3;
  if (has_to_party()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->to_party(), output);
  }
  
  // required .tss.LYMsgType msg_type = 4;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msg_type(), output);
  }
  
  // required int32 msg_id = 5;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->msg_id(), output);
  }
  
  // required int64 timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->timestamp(), output);
  }
  
  // optional string snd_id = 7;
  if (has_snd_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snd_id().data(), this->snd_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->snd_id(), output);
  }
  
  // optional string rcv_id = 8;
  if (has_rcv_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcv_id().data(), this->rcv_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->rcv_id(), output);
  }
  
  // optional bytes signature = 9;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->signature(), output);
  }
  
  // optional .tss.LYRetCode ret_code = 17;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->ret_code(), output);
  }
  
  // optional .tss.LYCheckin checkin = 18;
  if (has_checkin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->checkin(), output);
  }
  
  // optional .tss.LYDeviceReport device_report = 19;
  if (has_device_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->device_report(), output);
  }
  
  // optional .tss.LYTrafficSub traffic_sub = 36;
  if (has_traffic_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->traffic_sub(), output);
  }
  
  // optional .tss.LYTrafficPub traffic_pub = 51;
  if (has_traffic_pub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->traffic_pub(), output);
  }
  
  // optional .tss.LYTrafficReport traffic_report = 65;
  if (has_traffic_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->traffic_report(), output);
  }
  
  // Extension range [128, 256)
  _extensions_.SerializeWithCachedSizes(
      128, 256, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LYMsgOnAir::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  // required .tss.LYParty from_party = 2;
  if (has_from_party()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->from_party(), target);
  }
  
  // required .tss.LYParty to_party = 3;
  if (has_to_party()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->to_party(), target);
  }
  
  // required .tss.LYMsgType msg_type = 4;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msg_type(), target);
  }
  
  // required int32 msg_id = 5;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->msg_id(), target);
  }
  
  // required int64 timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->timestamp(), target);
  }
  
  // optional string snd_id = 7;
  if (has_snd_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snd_id().data(), this->snd_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->snd_id(), target);
  }
  
  // optional string rcv_id = 8;
  if (has_rcv_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rcv_id().data(), this->rcv_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rcv_id(), target);
  }
  
  // optional bytes signature = 9;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->signature(), target);
  }
  
  // optional .tss.LYRetCode ret_code = 17;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->ret_code(), target);
  }
  
  // optional .tss.LYCheckin checkin = 18;
  if (has_checkin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->checkin(), target);
  }
  
  // optional .tss.LYDeviceReport device_report = 19;
  if (has_device_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->device_report(), target);
  }
  
  // optional .tss.LYTrafficSub traffic_sub = 36;
  if (has_traffic_sub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->traffic_sub(), target);
  }
  
  // optional .tss.LYTrafficPub traffic_pub = 51;
  if (has_traffic_pub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->traffic_pub(), target);
  }
  
  // optional .tss.LYTrafficReport traffic_report = 65;
  if (has_traffic_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->traffic_report(), target);
  }
  
  // Extension range [128, 256)
  target = _extensions_.SerializeWithCachedSizesToArray(
      128, 256, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LYMsgOnAir::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // required int32 msg_id = 5;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_id());
    }
    
    // required int64 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
    // required .tss.LYParty from_party = 2;
    if (has_from_party()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->from_party());
    }
    
    // required .tss.LYParty to_party = 3;
    if (has_to_party()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->to_party());
    }
    
    // required .tss.LYMsgType msg_type = 4;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }
    
    // optional string snd_id = 7;
    if (has_snd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snd_id());
    }
    
    // optional string rcv_id = 8;
    if (has_rcv_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rcv_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes signature = 9;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }
    
    // optional .tss.LYRetCode ret_code = 17;
    if (has_ret_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }
    
    // optional .tss.LYCheckin checkin = 18;
    if (has_checkin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checkin());
    }
    
    // optional .tss.LYDeviceReport device_report = 19;
    if (has_device_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_report());
    }
    
    // optional .tss.LYTrafficSub traffic_sub = 36;
    if (has_traffic_sub()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traffic_sub());
    }
    
    // optional .tss.LYTrafficPub traffic_pub = 51;
    if (has_traffic_pub()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traffic_pub());
    }
    
    // optional .tss.LYTrafficReport traffic_report = 65;
    if (has_traffic_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traffic_report());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LYMsgOnAir::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LYMsgOnAir* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LYMsgOnAir*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LYMsgOnAir::MergeFrom(const LYMsgOnAir& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_from_party()) {
      set_from_party(from.from_party());
    }
    if (from.has_to_party()) {
      set_to_party(from.to_party());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_snd_id()) {
      set_snd_id(from.snd_id());
    }
    if (from.has_rcv_id()) {
      set_rcv_id(from.rcv_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_checkin()) {
      mutable_checkin()->::tss::LYCheckin::MergeFrom(from.checkin());
    }
    if (from.has_device_report()) {
      mutable_device_report()->::tss::LYDeviceReport::MergeFrom(from.device_report());
    }
    if (from.has_traffic_sub()) {
      mutable_traffic_sub()->::tss::LYTrafficSub::MergeFrom(from.traffic_sub());
    }
    if (from.has_traffic_pub()) {
      mutable_traffic_pub()->::tss::LYTrafficPub::MergeFrom(from.traffic_pub());
    }
    if (from.has_traffic_report()) {
      mutable_traffic_report()->::tss::LYTrafficReport::MergeFrom(from.traffic_report());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LYMsgOnAir::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LYMsgOnAir::CopyFrom(const LYMsgOnAir& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LYMsgOnAir::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_checkin()) {
    if (!this->checkin().IsInitialized()) return false;
  }
  if (has_device_report()) {
    if (!this->device_report().IsInitialized()) return false;
  }
  if (has_traffic_sub()) {
    if (!this->traffic_sub().IsInitialized()) return false;
  }
  if (has_traffic_pub()) {
    if (!this->traffic_pub().IsInitialized()) return false;
  }
  if (has_traffic_report()) {
    if (!this->traffic_report().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void LYMsgOnAir::Swap(LYMsgOnAir* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(from_party_, other->from_party_);
    std::swap(to_party_, other->to_party_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(snd_id_, other->snd_id_);
    std::swap(rcv_id_, other->rcv_id_);
    std::swap(signature_, other->signature_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(checkin_, other->checkin_);
    std::swap(device_report_, other->device_report_);
    std::swap(traffic_sub_, other->traffic_sub_);
    std::swap(traffic_pub_, other->traffic_pub_);
    std::swap(traffic_report_, other->traffic_report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata LYMsgOnAir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LYMsgOnAir_descriptor_;
  metadata.reflection = LYMsgOnAir_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tss

// @@protoc_insertion_point(global_scope)
